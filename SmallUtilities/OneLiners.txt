This file is just a list of useful one-liners or similarly small fragments that don't even fall under a small utility.
Each should have a short description as well as what environment/shell to use it in.
Also includes cool things to revisit and examples of commands that are forgettable if not frequently used.

CMD

  Check for remote users currently signed into a machine.
    Query user /server:COMPUTER

  List all tasks running on remote computer to local csv
    Tasklist /s COMPUTER /v /fo csv > results.csv

  Hijack other logged on user's sessions, use with query user id info
  Only works if logged into target machine through RDP or locally
  No password needed if running command prompt as system user (PsExec.exe -s)
    tscon SESSIONID /DEST:CURRENTSESSION

  Check group policy
    Gpresult /r /scope computer
    gpresult /r /scope user

  Log when a user logs in. Works nicely with Logon scripts GPO to setup a way to track profile logins on a local machine.
    echo Logon %date% %time% > %APPDATA%\access.log

WMIC
  Get software installed on machine
    Wmic /node:COMPUTER product get name, version, vendor

  Get Win10 and up License key from hardware
    Wmic path softwarelicensingservice get OA3xOriginalProductKey

PsExec.exe

  Run a batch file remotely on all hosts in the host list
    PsExec.exe @PATHTOHOSTLIST -i -u DOMAIN\USERNAME -c PATHTOBATCHFILE

Powershell
  Allow running of PS1 scripts
    Set-ExecutionPolicy remotesigned

  Get all AD users according to OU search.
    Get-ADUser -Filter * |Where-Object { ($_.DistinguishedName -like "*OU=Branch*") } |Select SamAccountName

  Get user profiles not used in the last 365 days
  Get-CimInstance -ClassName Win32_UserProfile | Where-Object {(!$_.Special) -and ([DateTime]::Parse($_.LastUseTime) -lt (Get-Date).AddDays(-365))} | sort -Property LastUseTime

  Get a csv of all files created today in the current location.
    Get-Childitem .\ * -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.CreationTime -gt (Get-Date).Date } | Select-Object -Property Name, CreationTime, Directory |Export-CSV -Path .\output.csv

  On-Site Exchange - Only works on exchange server/session
    Check Emails sent/received
      Get-MessageTrace -StartDate "06/13/2018 00:00:00" |findstr "email@address.com" |findstr "SEND"

    Search all mailboxes and copy matches to TargetMailbox
      Get-Mailbox | Search-Mailbox -SearchQuery 'from:target@email.com' -TargetMailbox "username"

  Dump all computers into a variable based on search filter
    $computers = Get-ADComputer -Filter 'Name -like "*"'

  Check if computers are online
    $computers.Name | ForEach-Object {Write-Output $_; Test-Connection -BufferSize 32 -Count 1 -ComputerName $_ -Quiet -TimeoutSeconds 1;}

  Check logged in users for all computers.
    $computers.Name | ForEach-Object {if (Test-Connection -BufferSize 32 -Count 1 -ComputerName $_ -Quiet -TimeoutSeconds 1) {Write-Output $_; query user /server:$_;}}

  Get all adusers last password change as human readable date and output to grid view then selection as csv
    Get-ADUser -Filter * -Properties * |select cn, emailaddress, @{name ="pwdLastSet"; expression={[datetime]::FromFileTime($_.pwdLastSet)}}, UserPrincipalName, LastLogonDate, PasswordNeverExpires, Enabled | Where-Object {!$_.PasswordNeverExpires -and $_.Enabled} | Out-GridView -PassThru -Title "Password Reset Dates" | Export-Csv .\passwordChanges.csv
    
  Speed test
    $a=Get-Date; Invoke-WebRequest http://ipv4.download.thinkbroadband.com/10MB.zip|Out-Null; "$((10/((Get-Date)-$a).TotalSeconds)*8) Mbps"

  Get device and driver information
    Get-PnpDevice -PresentOnly -FriendlyName "Intel*Wi-Fi*" | Get-PnpDeviceProperty -KeyName DEVPKEY_Device_InstallDate

  Get software install data using registry
    $Apps = @()
    $Apps += Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
    $Apps += Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" 
    $Apps | ft

  Get whether the lock screen is in use - whether computer is locked
    Get-Process -Name "logonui"

  Enable remote event viewer
    Set-NetFirewallRule -DisplayGroup 'Remote Event Log Management' -Enabled True -PassThru | Select-Object -Property DisplayName, Enabled

  Logout selected users after running Get-LoggedInUser
    $result | ogv -PassThru | ForEach-Object { cmd.exe /c "logoff $($_.id) /SERVER:$($_.ComputerName)"}

  Refresh kerberos tickets and security groups using the Update-SecurityGroups functions in PSImports.ps1

  Check for specific event IDs, return the last 10 hits
    wevtutil qe system "/q:*[System [(EventID=41) or (EventID=1074) or (EventID=6005) or (EventID=6006) or (EventID=6008)]]" /rd:true /f:text /c:10
      Only return datetime
        wevtutil qe system "/q:*[System [(EventID=6006)]]" /rd:true /f:text /c:10 | findstr /i "date"
        wevtutil qe system "/q:*[System [(EventID=41) or (EventID=1074) or (EventID=6005) or (EventID=6006) or (EventID=6008)]]" /rd:true /f:text /c:10 | findstr /i "date"
      Useful IDs
        41 Partial reboot
        1074 Start or application shutdown/reboot
        6005 Startup
        6006 Proper shutdown
        6008 Unexpected shutdown

  Get external IP address
    nslookup myip.opendns.com. resolver1.opendns.com
    Invoke-RestMethod ipinfo.io/ip
  
  Jigglers
    Keyboard jiggler
      $wshell = New-Object -ComObject wscript.shell; while($True){ Start-Sleep -Seconds 60; $wshell.SendKeys('{F13}') }
    Mouse jiggler top left
      Add-Type -AssemblyName System.Windows.Forms;while($True){[Windows.Forms.Cursor]::Position=((Get-Random 100).(Get-Random 100));Start-Sleep 60}
    Mouse jiggler but anywhere on the screen
      Add-Type -AssemblyName System.Windows.Forms; $w=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Width; $h=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Height; while($True) { [Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point((Get-Random -Minimum 0 -Maximum $w), (Get-Random -Minimum 0 -Maximum $h)); Start-Sleep 60 }

  ORCA - https://office365itpros.com/2019/11/14/orca-checks-office365-atp-settings/
    Install-Module -Name ORCA
    Import-Module ExchangeOnlineManagement

    Get-ORCAReport 

  Command to encoded command (Only works on PS V5 and up) - https://stackoverflow.com/questions/22258668/how-to-condense-powershell-script-to-fit-on-a-single-line
    Turn a script into raw Base64
      $command = Get-Content .\YourPowerShellFileContainingTheCode.ps1 -raw
      # Get-Content may require "-encoding utf8" or other encodings depending on your file
      $encodedCommand = [System.Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($command))
      Write-Output "Text for application:"
      Write-Output "PowerShell.exe" ""
      Write-Output "Text for argurments:"
      Write-Output "-encodedCommand $encodedCommand"

    Run base64 script using PowerShell (Works awesome for scheduled tasks and remote commands where you may not want to bother with creating a script/changing ExecutionPolicy)
      PowerShell.exe -encodedCommand EncodedCommandStringOutputFromTheBase64Above
      
  Install Microsoft Graph PowerShell SDK
    Powershell >= 5.1
    Dotnet >= 4.7
    Install-Module PowerShellGet
    Get-ExecutionPolicy
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
    Install-Module Microsoft.Graph -Scope CurrentUser
    Get-InstalledModule Microsoft.Graph


  Privileged Identity Management controls
    To connect and view PIM scopes (Requires M$ Graph PowerShell SDK)
      Connect-MgGraph -Scopes "RoleManagement.ReadWrite.Directory"
      Get-MgRoleManagementDirectoryRoleEligibilityScheduleInstance -Filter "principalId eq '$UUID'"  | Format-List

  Fix domain computer trust without a full rejoin
    Test-ComputerSecureChannel -Repair -Credential $cred